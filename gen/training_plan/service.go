// Code generated by goa v3.20.0, DO NOT EDIT.
//
// training_plan service
//
// Command:
// $ goa gen be/design

package trainingplan

import (
	"context"

	"goa.design/goa/v3/security"
)

// Service for managing training plans
type Service interface {
	// Create implements create.
	Create(context.Context, *CreatePayload) (res *TrainingPlan, err error)
	// Get implements get.
	Get(context.Context, *GetPayload) (res *TrainingPlan, err error)
	// List implements list.
	List(context.Context, *ListPayload) (res []*TrainingPlan, err error)
	// Update implements update.
	Update(context.Context, *UpdatePayload) (res *TrainingPlan, err error)
	// Delete implements delete.
	Delete(context.Context, *DeletePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "be_service"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "training_plan"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"create", "get", "list", "update", "delete"}

// Body di risposta per la richiesta non valida (400)
type BadRequest struct {
	// Nome dell'errore
	Name string
	// ID dell'errore
	ID string
	// Descrizione dettagliata dell'errore
	Message string
	// Indica se l'errore è temporaneo
	Temporary bool
	// Indica se l'errore è dovuto a un timeout
	Timeout bool
	// Indica se l'errore è dovuto a un problema del server
	Fault bool
}

// CreatePayload is the payload type of the training_plan service create method.
type CreatePayload struct {
	// OAuth2 access token used to perform authorization
	Token *string
	// Name of the plan
	Name string
	// Description
	Description *string
	StartDate   string
	EndDate     string
	UserID      string
}

// DeletePayload is the payload type of the training_plan service delete method.
type DeletePayload struct {
	// OAuth2 access token used to perform authorization
	Token *string
	ID    string
}

// GetPayload is the payload type of the training_plan service get method.
type GetPayload struct {
	// OAuth2 access token used to perform authorization
	Token string
	// Training plan ID
	ID string
}

// Errore nel server
type InternalServerError struct {
	// Descrizione dell'errore
	Message string
}

// ListPayload is the payload type of the training_plan service list method.
type ListPayload struct {
	// OAuth2 access token used to perform authorization
	Token *string
	// Filter by user ID
	UserID *string
	// Filter plans starting after this date (ISO 8601)
	StartAfter *string
	// Max number of results
	Limit int
	// Results to skip
	Offset int
}

// Dato non trovato all'interno del sistema
type NotFound struct {
	// Descrizione dell'errore
	Message string
}

// TrainingPlan is the result type of the training_plan service create method.
type TrainingPlan struct {
	// TrainingPlan ID
	ID string
	// Name of the training plan
	Name string
	// Description of the plan
	Description *string
	// Start date in ISO 8601
	StartDate string
	// End date in ISO 8601
	EndDate string
	// ID of the user who owns the plan
	UserID string
}

// UpdatePayload is the payload type of the training_plan service update method.
type UpdatePayload struct {
	// OAuth2 access token used to perform authorization
	Token *string
	ID    string
	// Name of the plan
	Name string
	// Description
	Description *string
	StartDate   string
	EndDate     string
	UserID      string
}

// Error returns an error description.
func (e *BadRequest) Error() string {
	return "Body di risposta per la richiesta non valida (400)"
}

// ErrorName returns "BadRequest".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequest) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequest".
func (e *BadRequest) GoaErrorName() string {
	return "badRequest"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Errore nel server"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internalServerError"
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "Dato non trovato all'interno del sistema "
}

// ErrorName returns "NotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFound".
func (e *NotFound) GoaErrorName() string {
	return "notFound"
}
