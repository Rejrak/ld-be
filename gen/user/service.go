// Code generated by goa v3.20.0, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen be/design

package user

import (
	"context"

	"goa.design/goa/v3/security"
)

// User service for managing users
type Service interface {
	// Create a new user
	Create(context.Context, *CreatePayload) (res *User, err error)
	// Get a user by ID
	Get(context.Context, *GetPayload) (res *UserWithPlans, err error)
	// List all users with pagination
	List(context.Context, *ListPayload) (res []*User, err error)
	// Update a user
	Update(context.Context, *UpdatePayload) (res *User, err error)
	// Delete a user
	Delete(context.Context, *DeletePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "be_service"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"create", "get", "list", "update", "delete"}

// Body di risposta per la richiesta non valida (400)
type BadRequest struct {
	// Nome dell'errore
	Name string
	// ID dell'errore
	ID string
	// Descrizione dettagliata dell'errore
	Message string
	// Indica se l'errore è temporaneo
	Temporary bool
	// Indica se l'errore è dovuto a un timeout
	Timeout bool
	// Indica se l'errore è dovuto a un problema del server
	Fault bool
}

// CreatePayload is the payload type of the user service create method.
type CreatePayload struct {
	// OAuth2 access token used to perform authorization
	Token *string
	// First name
	FirstName string
	// Last name
	LastName string
	// Nickname
	Nickname *string
	// User password
	Password *string
	// Is admin?
	Admin bool
}

// DeletePayload is the payload type of the user service delete method.
type DeletePayload struct {
	// OAuth2 access token used to perform authorization
	Token *string
	// User ID
	ID string
}

// Cannot access the resource
type Forbidden struct {
	// Detailed description of the error
	Message string
}

// GetPayload is the payload type of the user service get method.
type GetPayload struct {
	// OAuth2 access token used to perform authorization
	Token *string
	// User ID
	ID string
}

// Errore nel server
type InternalServerError struct {
	// Descrizione dell'errore
	Message string
}

// ListPayload is the payload type of the user service list method.
type ListPayload struct {
	// OAuth2 access token used to perform authorization
	Token *string
	// Number of users to return per page
	Limit int
	// Number of users to skip
	Offset int
}

// Dato non trovato all'interno del sistema
type NotFound struct {
	// Descrizione dell'errore
	Message string
}

type TrainingPlan struct {
	// TrainingPlan ID
	ID string
	// Name of the training plan
	Name string
	// Description of the plan
	Description *string
	// Start date in ISO 8601
	StartDate string
	// End date in ISO 8601
	EndDate string
	// ID of the user who owns the plan
	UserID string
}

// User not authorized to access the resource
type Unauthorized struct {
	// Descrizione dell'errore
	Message string
}

// UpdatePayload is the payload type of the user service update method.
type UpdatePayload struct {
	// OAuth2 access token used to perform authorization
	Token *string
	// User ID
	ID string
	// First name
	FirstName string
	// Last name
	LastName string
	// Nickname
	Nickname *string
	// Is admin?
	Admin bool
}

// User is the result type of the user service create method.
type User struct {
	// Unique ID of the user
	ID string
	// Keycloak ID
	KcID string
	// First name of the user
	FirstName string
	// Last name of the user
	LastName string
	// Nickname
	Nickname *string
	// Is the user an admin?
	Admin bool
}

// UserWithPlans is the result type of the user service get method.
type UserWithPlans struct {
	// List of training plans for the user
	TrainingPlans []*TrainingPlan
	// Unique ID of the user
	ID string
	// Keycloak ID
	KcID string
	// First name of the user
	FirstName string
	// Last name of the user
	LastName string
	// Nickname
	Nickname *string
	// Is the user an admin?
	Admin bool
}

// Error returns an error description.
func (e *BadRequest) Error() string {
	return "Body di risposta per la richiesta non valida (400)"
}

// ErrorName returns "BadRequest".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequest) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequest".
func (e *BadRequest) GoaErrorName() string {
	return "badRequest"
}

// Error returns an error description.
func (e *Forbidden) Error() string {
	return "Cannot access the resource"
}

// ErrorName returns "Forbidden".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *Forbidden) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "Forbidden".
func (e *Forbidden) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return "Errore nel server"
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "internalServerError"
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "Dato non trovato all'interno del sistema "
}

// ErrorName returns "NotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFound".
func (e *NotFound) GoaErrorName() string {
	return "notFound"
}

// Error returns an error description.
func (e *Unauthorized) Error() string {
	return "User not authorized to access the resource"
}

// ErrorName returns "Unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "Unauthorized".
func (e *Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
