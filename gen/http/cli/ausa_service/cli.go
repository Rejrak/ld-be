// Code generated by goa v3.20.0, DO NOT EDIT.
//
// ausa_service HTTP client CLI support package
//
// Command:
// $ goa gen be/design

package cli

import (
	trainingplanc "be/gen/http/training_plan/client"
	userc "be/gen/http/user/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `training-plan (create|get|list|update|delete)
user (create|get|list|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` training-plan create --body '{
      "description": "A plan for strength.",
      "endDate": "2025-04-25T00:00:00Z",
      "name": "Upper Body Strength",
      "startDate": "2025-03-25T00:00:00Z",
      "userId": "550e8400-e29b-41d4-a716-446655440000"
   }'` + "\n" +
		os.Args[0] + ` user create --body '{
      "admin": false,
      "firstName": "John",
      "lastName": "Doe",
      "nickname": "JD",
      "password": "Secret!1"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		trainingPlanFlags = flag.NewFlagSet("training-plan", flag.ContinueOnError)

		trainingPlanCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		trainingPlanCreateBodyFlag = trainingPlanCreateFlags.String("body", "REQUIRED", "")

		trainingPlanGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		trainingPlanGetIDFlag = trainingPlanGetFlags.String("id", "REQUIRED", "Training plan ID")

		trainingPlanListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		trainingPlanUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		trainingPlanUpdateBodyFlag = trainingPlanUpdateFlags.String("body", "REQUIRED", "")
		trainingPlanUpdateIDFlag   = trainingPlanUpdateFlags.String("id", "REQUIRED", "")

		trainingPlanDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		trainingPlanDeleteIDFlag = trainingPlanDeleteFlags.String("id", "REQUIRED", "")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		userCreateBodyFlag = userCreateFlags.String("body", "REQUIRED", "")

		userGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		userGetIDFlag = userGetFlags.String("id", "REQUIRED", "User ID")

		userListFlags      = flag.NewFlagSet("list", flag.ExitOnError)
		userListLimitFlag  = userListFlags.String("limit", "10", "")
		userListOffsetFlag = userListFlags.String("offset", "", "")

		userUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		userUpdateBodyFlag = userUpdateFlags.String("body", "REQUIRED", "")
		userUpdateIDFlag   = userUpdateFlags.String("id", "REQUIRED", "User ID")

		userDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		userDeleteIDFlag = userDeleteFlags.String("id", "REQUIRED", "User ID")
	)
	trainingPlanFlags.Usage = trainingPlanUsage
	trainingPlanCreateFlags.Usage = trainingPlanCreateUsage
	trainingPlanGetFlags.Usage = trainingPlanGetUsage
	trainingPlanListFlags.Usage = trainingPlanListUsage
	trainingPlanUpdateFlags.Usage = trainingPlanUpdateUsage
	trainingPlanDeleteFlags.Usage = trainingPlanDeleteUsage

	userFlags.Usage = userUsage
	userCreateFlags.Usage = userCreateUsage
	userGetFlags.Usage = userGetUsage
	userListFlags.Usage = userListUsage
	userUpdateFlags.Usage = userUpdateUsage
	userDeleteFlags.Usage = userDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "training-plan":
			svcf = trainingPlanFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "training-plan":
			switch epn {
			case "create":
				epf = trainingPlanCreateFlags

			case "get":
				epf = trainingPlanGetFlags

			case "list":
				epf = trainingPlanListFlags

			case "update":
				epf = trainingPlanUpdateFlags

			case "delete":
				epf = trainingPlanDeleteFlags

			}

		case "user":
			switch epn {
			case "create":
				epf = userCreateFlags

			case "get":
				epf = userGetFlags

			case "list":
				epf = userListFlags

			case "update":
				epf = userUpdateFlags

			case "delete":
				epf = userDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "training-plan":
			c := trainingplanc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = trainingplanc.BuildCreatePayload(*trainingPlanCreateBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = trainingplanc.BuildGetPayload(*trainingPlanGetIDFlag)
			case "list":
				endpoint = c.List()
			case "update":
				endpoint = c.Update()
				data, err = trainingplanc.BuildUpdatePayload(*trainingPlanUpdateBodyFlag, *trainingPlanUpdateIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = trainingplanc.BuildDeletePayload(*trainingPlanDeleteIDFlag)
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = userc.BuildCreatePayload(*userCreateBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = userc.BuildGetPayload(*userGetIDFlag)
			case "list":
				endpoint = c.List()
				data, err = userc.BuildListPayload(*userListLimitFlag, *userListOffsetFlag)
			case "update":
				endpoint = c.Update()
				data, err = userc.BuildUpdatePayload(*userUpdateBodyFlag, *userUpdateIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = userc.BuildDeletePayload(*userDeleteIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// trainingPlanUsage displays the usage of the training-plan command and its
// subcommands.
func trainingPlanUsage() {
	fmt.Fprintf(os.Stderr, `Service for managing training plans
Usage:
    %[1]s [globalflags] training-plan COMMAND [flags]

COMMAND:
    create: Create implements create.
    get: Get implements get.
    list: List implements list.
    update: Update implements update.
    delete: Delete implements delete.

Additional help:
    %[1]s training-plan COMMAND --help
`, os.Args[0])
}
func trainingPlanCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] training-plan create -body JSON

Create implements create.
    -body JSON: 

Example:
    %[1]s training-plan create --body '{
      "description": "A plan for strength.",
      "endDate": "2025-04-25T00:00:00Z",
      "name": "Upper Body Strength",
      "startDate": "2025-03-25T00:00:00Z",
      "userId": "550e8400-e29b-41d4-a716-446655440000"
   }'
`, os.Args[0])
}

func trainingPlanGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] training-plan get -id STRING

Get implements get.
    -id STRING: Training plan ID

Example:
    %[1]s training-plan get --id "6887f57a-4398-4354-9693-f5a954d06696"
`, os.Args[0])
}

func trainingPlanListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] training-plan list

List implements list.

Example:
    %[1]s training-plan list
`, os.Args[0])
}

func trainingPlanUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] training-plan update -body JSON -id STRING

Update implements update.
    -body JSON: 
    -id STRING: 

Example:
    %[1]s training-plan update --body '{
      "description": "A plan for strength.",
      "endDate": "2025-04-25T00:00:00Z",
      "name": "Upper Body Strength",
      "startDate": "2025-03-25T00:00:00Z",
      "userId": "550e8400-e29b-41d4-a716-446655440000"
   }' --id "db8644bd-ab69-4870-af7b-67f489e237e2"
`, os.Args[0])
}

func trainingPlanDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] training-plan delete -id STRING

Delete implements delete.
    -id STRING: 

Example:
    %[1]s training-plan delete --id "a88cc9f1-a9d0-482e-beda-45aea9d97b6c"
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `User service for managing users
Usage:
    %[1]s [globalflags] user COMMAND [flags]

COMMAND:
    create: Create a new user
    get: Get a user by ID
    list: List all users with pagination
    update: Update a user
    delete: Delete a user

Additional help:
    %[1]s user COMMAND --help
`, os.Args[0])
}
func userCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user create -body JSON

Create a new user
    -body JSON: 

Example:
    %[1]s user create --body '{
      "admin": false,
      "firstName": "John",
      "lastName": "Doe",
      "nickname": "JD",
      "password": "Secret!1"
   }'
`, os.Args[0])
}

func userGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user get -id STRING

Get a user by ID
    -id STRING: User ID

Example:
    %[1]s user get --id "f47ac10b-58cc-4372-a567-0e02b2c3d479"
`, os.Args[0])
}

func userListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user list -limit INT -offset INT

List all users with pagination
    -limit INT: 
    -offset INT: 

Example:
    %[1]s user list --limit 10 --offset 0
`, os.Args[0])
}

func userUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user update -body JSON -id STRING

Update a user
    -body JSON: 
    -id STRING: User ID

Example:
    %[1]s user update --body '{
      "admin": false,
      "firstName": "John",
      "lastName": "Doe",
      "nickname": "JD"
   }' --id "f47ac10b-58cc-4372-a567-0e02b2c3d479"
`, os.Args[0])
}

func userDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] user delete -id STRING

Delete a user
    -id STRING: User ID

Example:
    %[1]s user delete --id "f47ac10b-58cc-4372-a567-0e02b2c3d479"
`, os.Args[0])
}
