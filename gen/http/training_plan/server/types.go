// Code generated by goa v3.20.0, DO NOT EDIT.
//
// training_plan HTTP server types
//
// Command:
// $ goa gen be/design

package server

import (
	trainingplan "be/gen/training_plan"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "training_plan" service "create"
// endpoint HTTP request body.
type CreateRequestBody struct {
	// Name of the plan
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	StartDate   *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	EndDate     *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	UserID      *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// UpdateRequestBody is the type of the "training_plan" service "update"
// endpoint HTTP request body.
type UpdateRequestBody struct {
	// Name of the plan
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	StartDate   *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	EndDate     *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
	UserID      *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// CreateResponseBody is the type of the "training_plan" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	// TrainingPlan ID
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the plan
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date in ISO 8601
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date in ISO 8601
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// ID of the user who owns the plan
	UserID string `form:"userId" json:"userId" xml:"userId"`
}

// GetResponseBody is the type of the "training_plan" service "get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// TrainingPlan ID
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the plan
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date in ISO 8601
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date in ISO 8601
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// ID of the user who owns the plan
	UserID string `form:"userId" json:"userId" xml:"userId"`
}

// ListResponseBody is the type of the "training_plan" service "list" endpoint
// HTTP response body.
type ListResponseBody []*TrainingPlanResponse

// UpdateResponseBody is the type of the "training_plan" service "update"
// endpoint HTTP response body.
type UpdateResponseBody struct {
	// TrainingPlan ID
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the plan
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date in ISO 8601
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date in ISO 8601
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// ID of the user who owns the plan
	UserID string `form:"userId" json:"userId" xml:"userId"`
}

// TrainingPlanResponse is used to define fields on response body types.
type TrainingPlanResponse struct {
	// TrainingPlan ID
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the training plan
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the plan
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Start date in ISO 8601
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// End date in ISO 8601
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
	// ID of the user who owns the plan
	UserID string `form:"userId" json:"userId" xml:"userId"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "training_plan" service.
func NewCreateResponseBody(res *trainingplan.TrainingPlan) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		StartDate:   res.StartDate,
		EndDate:     res.EndDate,
		UserID:      res.UserID,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "training_plan" service.
func NewGetResponseBody(res *trainingplan.TrainingPlan) *GetResponseBody {
	body := &GetResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		StartDate:   res.StartDate,
		EndDate:     res.EndDate,
		UserID:      res.UserID,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "training_plan" service.
func NewListResponseBody(res []*trainingplan.TrainingPlan) ListResponseBody {
	body := make([]*TrainingPlanResponse, len(res))
	for i, val := range res {
		body[i] = marshalTrainingplanTrainingPlanToTrainingPlanResponse(val)
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "training_plan" service.
func NewUpdateResponseBody(res *trainingplan.TrainingPlan) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		StartDate:   res.StartDate,
		EndDate:     res.EndDate,
		UserID:      res.UserID,
	}
	return body
}

// NewCreatePayload builds a training_plan service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, token *string) *trainingplan.CreatePayload {
	v := &trainingplan.CreatePayload{
		Name:        *body.Name,
		Description: body.Description,
		StartDate:   *body.StartDate,
		EndDate:     *body.EndDate,
		UserID:      *body.UserID,
	}
	v.Token = token

	return v
}

// NewGetPayload builds a training_plan service get endpoint payload.
func NewGetPayload(id string, token string) *trainingplan.GetPayload {
	v := &trainingplan.GetPayload{}
	v.ID = id
	v.Token = token

	return v
}

// NewListPayload builds a training_plan service list endpoint payload.
func NewListPayload(token *string) *trainingplan.ListPayload {
	v := &trainingplan.ListPayload{}
	v.Token = token

	return v
}

// NewUpdatePayload builds a training_plan service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id string, token *string) *trainingplan.UpdatePayload {
	v := &trainingplan.UpdatePayload{
		Name:        *body.Name,
		Description: body.Description,
		StartDate:   *body.StartDate,
		EndDate:     *body.EndDate,
		UserID:      *body.UserID,
	}
	v.ID = id
	v.Token = token

	return v
}

// NewDeletePayload builds a training_plan service delete endpoint payload.
func NewDeletePayload(id string, token *string) *trainingplan.DeletePayload {
	v := &trainingplan.DeletePayload{}
	v.ID = id
	v.Token = token

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endDate", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDateTime))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDateTime))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.StartDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startDate", "body"))
	}
	if body.EndDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endDate", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDateTime))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDateTime))
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", *body.UserID, goa.FormatUUID))
	}
	return
}
