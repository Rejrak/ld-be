// Code generated by goa v3.20.0, DO NOT EDIT.
//
// training_plan HTTP client CLI support package
//
// Command:
// $ goa gen be/design

package client

import (
	trainingplan "be/gen/training_plan"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the training_plan create endpoint
// from CLI flags.
func BuildCreatePayload(trainingPlanCreateBody string) (*trainingplan.CreateTrainingPlanPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(trainingPlanCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"A plan for strength.\",\n      \"endDate\": \"2025-04-25T00:00:00Z\",\n      \"name\": \"Upper Body Strength\",\n      \"startDate\": \"2025-03-25T00:00:00Z\",\n      \"userId\": \"550e8400-e29b-41d4-a716-446655440000\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 1, true))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", body.StartDate, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", body.EndDate, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", body.UserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &trainingplan.CreateTrainingPlanPayload{
		Name:        body.Name,
		Description: body.Description,
		StartDate:   body.StartDate,
		EndDate:     body.EndDate,
		UserID:      body.UserID,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the training_plan get endpoint from
// CLI flags.
func BuildGetPayload(trainingPlanGetID string) (*trainingplan.GetPayload, error) {
	var err error
	var id string
	{
		id = trainingPlanGetID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &trainingplan.GetPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdatePayload builds the payload for the training_plan update endpoint
// from CLI flags.
func BuildUpdatePayload(trainingPlanUpdateBody string, trainingPlanUpdateID string) (*trainingplan.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(trainingPlanUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"A plan for strength.\",\n      \"endDate\": \"2025-04-25T00:00:00Z\",\n      \"name\": \"Upper Body Strength\",\n      \"startDate\": \"2025-03-25T00:00:00Z\",\n      \"userId\": \"550e8400-e29b-41d4-a716-446655440000\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 1, true))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", body.StartDate, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", body.EndDate, goa.FormatDateTime))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", body.UserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = trainingPlanUpdateID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &trainingplan.UpdatePayload{
		Name:        body.Name,
		Description: body.Description,
		StartDate:   body.StartDate,
		EndDate:     body.EndDate,
		UserID:      body.UserID,
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the training_plan delete endpoint
// from CLI flags.
func BuildDeletePayload(trainingPlanDeleteID string) (*trainingplan.DeletePayload, error) {
	var err error
	var id string
	{
		id = trainingPlanDeleteID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &trainingplan.DeletePayload{}
	v.ID = id

	return v, nil
}
