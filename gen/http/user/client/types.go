// Code generated by goa v3.19.1, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen be/design

package client

import (
	user "be/gen/user"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "user" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Keycloak ID
	KcID string `form:"kcId" json:"kcId" xml:"kcId"`
	// First name
	FirstName string `form:"firstName" json:"firstName" xml:"firstName"`
	// Last name
	LastName string `form:"lastName" json:"lastName" xml:"lastName"`
	// Nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// Is admin?
	Admin bool `form:"admin" json:"admin" xml:"admin"`
}

// UpdateRequestBody is the type of the "user" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Keycloak ID
	KcID string `form:"kcId" json:"kcId" xml:"kcId"`
	// First name
	FirstName string `form:"firstName" json:"firstName" xml:"firstName"`
	// Last name
	LastName string `form:"lastName" json:"lastName" xml:"lastName"`
	// Nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// Is admin?
	Admin bool `form:"admin" json:"admin" xml:"admin"`
}

// CreateResponseBody is the type of the "user" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// Unique ID of the user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Keycloak ID
	KcID *string `form:"kcId,omitempty" json:"kcId,omitempty" xml:"kcId,omitempty"`
	// First name of the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name of the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// Is the user an admin?
	Admin *bool `form:"admin,omitempty" json:"admin,omitempty" xml:"admin,omitempty"`
}

// GetResponseBody is the type of the "user" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Unique ID of the user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Keycloak ID
	KcID *string `form:"kcId,omitempty" json:"kcId,omitempty" xml:"kcId,omitempty"`
	// First name of the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name of the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// Is the user an admin?
	Admin *bool `form:"admin,omitempty" json:"admin,omitempty" xml:"admin,omitempty"`
}

// ListResponseBody is the type of the "user" service "list" endpoint HTTP
// response body.
type ListResponseBody []*UserResponse

// UpdateResponseBody is the type of the "user" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// Unique ID of the user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Keycloak ID
	KcID *string `form:"kcId,omitempty" json:"kcId,omitempty" xml:"kcId,omitempty"`
	// First name of the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name of the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// Is the user an admin?
	Admin *bool `form:"admin,omitempty" json:"admin,omitempty" xml:"admin,omitempty"`
}

// GetBadRequestResponseBody is the type of the "user" service "get" endpoint
// HTTP response body for the "badRequest" error.
type GetBadRequestResponseBody struct {
	// Nome dell'errore
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID dell'errore
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Descrizione dettagliata dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Indica se l'errore è temporaneo
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Indica se l'errore è dovuto a un timeout
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Indica se l'errore è dovuto a un problema del server
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetInternalServerErrorResponseBody is the type of the "user" service "get"
// endpoint HTTP response body for the "internalServerError" error.
type GetInternalServerErrorResponseBody struct {
	// Descrizione dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetNotFoundResponseBody is the type of the "user" service "get" endpoint
// HTTP response body for the "notFound" error.
type GetNotFoundResponseBody struct {
	// Descrizione dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetUnauthorizedResponseBody is the type of the "user" service "get" endpoint
// HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Descrizione dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "badRequest" error.
type UpdateBadRequestResponseBody struct {
	// Nome dell'errore
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID dell'errore
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Descrizione dettagliata dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Indica se l'errore è temporaneo
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Indica se l'errore è dovuto a un timeout
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Indica se l'errore è dovuto a un problema del server
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateInternalServerErrorResponseBody is the type of the "user" service
// "update" endpoint HTTP response body for the "internalServerError" error.
type UpdateInternalServerErrorResponseBody struct {
	// Descrizione dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "notFound" error.
type UpdateNotFoundResponseBody struct {
	// Descrizione dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateUnauthorizedResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Descrizione dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "user" service "delete"
// endpoint HTTP response body for the "badRequest" error.
type DeleteBadRequestResponseBody struct {
	// Nome dell'errore
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID dell'errore
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Descrizione dettagliata dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Indica se l'errore è temporaneo
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Indica se l'errore è dovuto a un timeout
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Indica se l'errore è dovuto a un problema del server
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteInternalServerErrorResponseBody is the type of the "user" service
// "delete" endpoint HTTP response body for the "internalServerError" error.
type DeleteInternalServerErrorResponseBody struct {
	// Descrizione dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "user" service "delete"
// endpoint HTTP response body for the "notFound" error.
type DeleteNotFoundResponseBody struct {
	// Descrizione dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteUnauthorizedResponseBody is the type of the "user" service "delete"
// endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Descrizione dell'errore
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// Unique ID of the user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Keycloak ID
	KcID *string `form:"kcId,omitempty" json:"kcId,omitempty" xml:"kcId,omitempty"`
	// First name of the user
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name of the user
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// Is the user an admin?
	Admin *bool `form:"admin,omitempty" json:"admin,omitempty" xml:"admin,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "user" service.
func NewCreateRequestBody(p *user.CreateUserPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		KcID:      p.KcID,
		FirstName: p.FirstName,
		LastName:  p.LastName,
		Nickname:  p.Nickname,
		Admin:     p.Admin,
	}
	{
		var zero bool
		if body.Admin == zero {
			body.Admin = false
		}
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "user" service.
func NewUpdateRequestBody(p *user.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		KcID:      p.KcID,
		FirstName: p.FirstName,
		LastName:  p.LastName,
		Nickname:  p.Nickname,
		Admin:     p.Admin,
	}
	{
		var zero bool
		if body.Admin == zero {
			body.Admin = false
		}
	}
	return body
}

// NewCreateUserCreated builds a "user" service "create" endpoint result from a
// HTTP "Created" response.
func NewCreateUserCreated(body *CreateResponseBody) *user.User {
	v := &user.User{
		ID:        *body.ID,
		KcID:      *body.KcID,
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Nickname:  body.Nickname,
	}
	if body.Admin != nil {
		v.Admin = *body.Admin
	}
	if body.Admin == nil {
		v.Admin = false
	}

	return v
}

// NewGetUserOK builds a "user" service "get" endpoint result from a HTTP "OK"
// response.
func NewGetUserOK(body *GetResponseBody) *user.User {
	v := &user.User{
		ID:        *body.ID,
		KcID:      *body.KcID,
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Nickname:  body.Nickname,
	}
	if body.Admin != nil {
		v.Admin = *body.Admin
	}
	if body.Admin == nil {
		v.Admin = false
	}

	return v
}

// NewGetBadRequest builds a user service get endpoint badRequest error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *user.BadRequest {
	v := &user.BadRequest{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetInternalServerError builds a user service get endpoint
// internalServerError error.
func NewGetInternalServerError(body *GetInternalServerErrorResponseBody) *user.InternalServerError {
	v := &user.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewGetNotFound builds a user service get endpoint notFound error.
func NewGetNotFound(body *GetNotFoundResponseBody) *user.NotFound {
	v := &user.NotFound{
		Message: *body.Message,
	}

	return v
}

// NewGetUnauthorized builds a user service get endpoint unauthorized error.
func NewGetUnauthorized(body *GetUnauthorizedResponseBody) *user.Unauthorized {
	v := &user.Unauthorized{
		Message: *body.Message,
	}

	return v
}

// NewListUserOK builds a "user" service "list" endpoint result from a HTTP
// "OK" response.
func NewListUserOK(body []*UserResponse) []*user.User {
	v := make([]*user.User, len(body))
	for i, val := range body {
		v[i] = unmarshalUserResponseToUserUser(val)
	}

	return v
}

// NewUpdateUserOK builds a "user" service "update" endpoint result from a HTTP
// "OK" response.
func NewUpdateUserOK(body *UpdateResponseBody) *user.User {
	v := &user.User{
		ID:        *body.ID,
		KcID:      *body.KcID,
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Nickname:  body.Nickname,
	}
	if body.Admin != nil {
		v.Admin = *body.Admin
	}
	if body.Admin == nil {
		v.Admin = false
	}

	return v
}

// NewUpdateBadRequest builds a user service update endpoint badRequest error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *user.BadRequest {
	v := &user.BadRequest{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateInternalServerError builds a user service update endpoint
// internalServerError error.
func NewUpdateInternalServerError(body *UpdateInternalServerErrorResponseBody) *user.InternalServerError {
	v := &user.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateNotFound builds a user service update endpoint notFound error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *user.NotFound {
	v := &user.NotFound{
		Message: *body.Message,
	}

	return v
}

// NewUpdateUnauthorized builds a user service update endpoint unauthorized
// error.
func NewUpdateUnauthorized(body *UpdateUnauthorizedResponseBody) *user.Unauthorized {
	v := &user.Unauthorized{
		Message: *body.Message,
	}

	return v
}

// NewDeleteBadRequest builds a user service delete endpoint badRequest error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *user.BadRequest {
	v := &user.BadRequest{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteInternalServerError builds a user service delete endpoint
// internalServerError error.
func NewDeleteInternalServerError(body *DeleteInternalServerErrorResponseBody) *user.InternalServerError {
	v := &user.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteNotFound builds a user service delete endpoint notFound error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *user.NotFound {
	v := &user.NotFound{
		Message: *body.Message,
	}

	return v
}

// NewDeleteUnauthorized builds a user service delete endpoint unauthorized
// error.
func NewDeleteUnauthorized(body *DeleteUnauthorizedResponseBody) *user.Unauthorized {
	v := &user.Unauthorized{
		Message: *body.Message,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.KcID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kcId", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.KcID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.kcId", *body.KcID, goa.FormatUUID))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.KcID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kcId", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.KcID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.kcId", *body.KcID, goa.FormatUUID))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.KcID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kcId", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.KcID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.kcId", *body.KcID, goa.FormatUUID))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// get_badRequest_response_body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetInternalServerErrorResponseBody runs the validations defined on
// get_internalServerError_response_body
func ValidateGetInternalServerErrorResponseBody(body *GetInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_notFound_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetUnauthorizedResponseBody runs the validations defined on
// get_unauthorized_response_body
func ValidateGetUnauthorizedResponseBody(body *GetUnauthorizedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_badRequest_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateInternalServerErrorResponseBody runs the validations defined
// on update_internalServerError_response_body
func ValidateUpdateInternalServerErrorResponseBody(body *UpdateInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_notFound_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateUnauthorizedResponseBody runs the validations defined on
// update_unauthorized_response_body
func ValidateUpdateUnauthorizedResponseBody(body *UpdateUnauthorizedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// delete_badRequest_response_body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteInternalServerErrorResponseBody runs the validations defined
// on delete_internalServerError_response_body
func ValidateDeleteInternalServerErrorResponseBody(body *DeleteInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_notFound_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteUnauthorizedResponseBody runs the validations defined on
// delete_unauthorized_response_body
func ValidateDeleteUnauthorizedResponseBody(body *DeleteUnauthorizedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUserResponse runs the validations defined on UserResponse
func ValidateUserResponse(body *UserResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.KcID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kcId", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.KcID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.kcId", *body.KcID, goa.FormatUUID))
	}
	return
}
