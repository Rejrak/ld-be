// Code generated by goa v3.19.1, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen be/design

package client

import (
	user "be/gen/user"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the user create endpoint from CLI
// flags.
func BuildCreatePayload(userCreateBody string) (*user.CreateUserPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(userCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"admin\": false,\n      \"firstName\": \"John\",\n      \"kcId\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"lastName\": \"Doe\",\n      \"nickname\": \"JD\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.kcId", body.KcID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &user.CreateUserPayload{
		KcID:      body.KcID,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Nickname:  body.Nickname,
		Admin:     body.Admin,
	}
	{
		var zero bool
		if v.Admin == zero {
			v.Admin = false
		}
	}

	return v, nil
}

// BuildGetPayload builds the payload for the user get endpoint from CLI flags.
func BuildGetPayload(userGetID string) (*user.GetPayload, error) {
	var err error
	var id string
	{
		id = userGetID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &user.GetPayload{}
	v.ID = id

	return v, nil
}

// BuildListPayload builds the payload for the user list endpoint from CLI
// flags.
func BuildListPayload(userListLimit string, userListOffset string) (*user.ListPayload, error) {
	var err error
	var limit int
	{
		if userListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(userListLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var offset int
	{
		if userListOffset != "" {
			var v int64
			v, err = strconv.ParseInt(userListOffset, 10, strconv.IntSize)
			offset = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be INT")
			}
			if offset < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &user.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v, nil
}

// BuildUpdatePayload builds the payload for the user update endpoint from CLI
// flags.
func BuildUpdatePayload(userUpdateBody string, userUpdateID string) (*user.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(userUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"admin\": false,\n      \"firstName\": \"John\",\n      \"kcId\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"lastName\": \"Doe\",\n      \"nickname\": \"JD\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.kcId", body.KcID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = userUpdateID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &user.UpdatePayload{
		KcID:      body.KcID,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Nickname:  body.Nickname,
		Admin:     body.Admin,
	}
	{
		var zero bool
		if v.Admin == zero {
			v.Admin = false
		}
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the user delete endpoint from CLI
// flags.
func BuildDeletePayload(userDeleteID string) (*user.DeletePayload, error) {
	var err error
	var id string
	{
		id = userDeleteID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &user.DeletePayload{}
	v.ID = id

	return v, nil
}
